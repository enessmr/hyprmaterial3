#!/usr/bin/env python3
import sys
from PIL import Image
import colorsys

def rgb_to_hex(rgb):
    return '#{:02x}{:02x}{:02x}'.format(*rgb)

def get_dominant_color(image_path, resize=150):
    try:
        image = Image.open(image_path)
        image = image.resize((resize, resize))
        result = image.convert('P', palette=Image.ADAPTIVE, colors=1)
        palette = result.getpalette()
        dominant_color = tuple(palette[:3])
        return dominant_color
    except Exception as e:
        print(f"Error processing image: {e}")
        sys.exit(1)

def lighten_color(rgb, factor=0.3):
    # Convert RGB to HLS, lighten the lightness, convert back
    r, g, b = [x/255.0 for x in rgb]
    h, l, s = colorsys.rgb_to_hls(r, g, b)
    l = min(1, l + factor)
    r, g, b = colorsys.hls_to_rgb(h, l, s)
    return (int(r*255), int(g*255), int(b*255))

def darken_color(rgb, factor=0.3):
    r, g, b = [x/255.0 for x in rgb]
    h, l, s = colorsys.rgb_to_hls(r, g, b)
    l = max(0, l - factor)
    r, g, b = colorsys.hls_to_rgb(h, l, s)
    return (int(r*255), int(g*255), int(b*255))

def generate_colors_scss(primary_rgb):
    primary = rgb_to_hex(primary_rgb)
    primary_container = rgb_to_hex(darken_color(primary_rgb, 0.2))
    on_primary = rgb_to_hex(lighten_color(primary_rgb, 0.6))
    on_primary_container = rgb_to_hex(lighten_color(primary_rgb, 0.8))

    # Placeholder fixed colors, adjust or generate as you want
    secondary = "#d1c1d9"
    on_secondary = "#372c3f"
    secondary_container = "#4e4256"
    on_secondary_container = "#eeddf6"

    return f"""
// Generated by matugen_color_extract.py
$primary: {primary};
$onPrimary: {on_primary};
$primaryContainer: {primary_container};
$onPrimaryContainer: {on_primary_container};
$secondary: {secondary};
$onSecondary: {on_secondary};
$secondaryContainer: {secondary_container};
$onSecondaryContainer: {on_secondary_container};
$tertiary: #f3b7bc;
$onTertiary: #4c2529;
$tertiaryContainer: #663a3f;
$onTertiaryContainer: #ffdadb;
$error: #ffb4ab;
$onError: #690005;
$errorContainer: #93000a;
$onErrorContainer: #ffdad6;
$surfaceDim: #151217;
$surface: #151217;
$surfaceBright: #3c383e;
$inverseSurface: #e8e0e8;
$inverseOnSurface: #332f35;
$surfaceContainerLowest: #100d12;
$surfaceContainerLow: #1e1a20;
$surfaceContainer: #221e24;
$surfaceContainerHigh: #2d292e;
$surfaceContainerHighest: #383339;
$inversePrimary: #705289;
$onSurface: #e8e0e8;
$onSurfaceVariable: #cdc4ce;
$outline: #968e98;
$outlineVariant: #4b454d;
$scrim: #000000;
$shadow: #000000;
"""

def main():
    if len(sys.argv) < 2:
        print("Usage: matugen_color_extract.py /path/to/wallpaper.jpg")
        sys.exit(1)

    wallpaper_path = sys.argv[1]
    primary_rgb = get_dominant_color(wallpaper_path)

    output_path = "/home/lfsuser/.config/ags/colors.scss"
    with open(output_path, "w") as f:
        f.write(generate_colors_scss(primary_rgb))

    print(f"Generated colors.scss with primary color {rgb_to_hex(primary_rgb)}")

if __name__ == "__main__":
    main()
